name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      rabbitmq:
        image: rabbitmq:3-management
        ports:
          - 5672:5672
          - 15672:15672
        env:
          RABBITMQ_DEFAULT_USER: guest
          RABBITMQ_DEFAULT_PASS: guest
      
      neo4j:
        image: neo4j:5.13
        ports:
          - 7474:7474
          - 7687:7687
        env:
          NEO4J_AUTH: neo4j/password
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Run tests with coverage (pkg)
      run: |
        go test -v -coverprofile=coverage-pkg.out ./pkg/...
        go tool cover -func=coverage-pkg.out | grep total | awk '{print substr($3, 1, length($3)-1)}' > coverage-pkg.txt
        COVERAGE=$(cat coverage-pkg.txt)
        echo "pkg/ total coverage: $COVERAGE%"
        if (( $(echo "$COVERAGE < 90.0" | bc -l) )); then
          echo "Test coverage in pkg/ $COVERAGE% is below the required 90% minimum."
          exit 1
        fi
      env:
        RABBITMQ_URL: amqp://guest:guest@localhost:5672/
        NEO4J_URI: neo4j://localhost:7687
        NEO4J_USERNAME: neo4j
        NEO4J_PASSWORD: password

    - name: Run tests with coverage (internal/domain)
      run: |
        go test -v -coverprofile=coverage-domain.out ./internal/domain/...
        go tool cover -func=coverage-domain.out | grep total | awk '{print substr($3, 1, length($3)-1)}' > coverage-domain.txt
        COVERAGE=$(cat coverage-domain.txt)
        echo "internal/domain/ total coverage: $COVERAGE%"
        if (( $(echo "$COVERAGE < 90.0" | bc -l) )); then
          echo "Test coverage in internal/domain/ $COVERAGE% is below the required 90% minimum."
          exit 1
        fi
      env:
        RABBITMQ_URL: amqp://guest:guest@localhost:5672/
        NEO4J_URI: neo4j://localhost:7687
        NEO4J_USERNAME: neo4j
        NEO4J_PASSWORD: password
    
    - name: Run go vet
      run: go vet ./...
    
    - name: Run go fmt check
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Code is not formatted properly:"
          gofmt -s -l .
          exit 1
        fi
    
    - name: Build application
      run: go build -v ./cmd/main.go

  docker:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: docker build -t openledger:latest .
    
    - name: Test Docker image
      run: |
        docker run --rm -d --name test-app -p 8080:8080 openledger:latest
        sleep 10
        curl -f http://localhost:8080/health || exit 1
        docker stop test-app

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Gosec Security Scanner
      uses: securego/gosec@master
      with:
        args: './...'
